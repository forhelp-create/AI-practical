from queue import PriorityQueue

graph = {
    'S': {'B': 4, 'C': 3},
    'B': {'F': 5, 'E': 12},
    'C': {'D': 7, 'E': 10},
    'D': {'E': 2},
    'E': {'G': 5},
    'F': {'G': 16},
    'G': {}
}

h = {
    'S': 14, 'B': 12, 'C': 11,
    'D': 6, 'E': 4, 'F': 11,
    'G': 0
}

def a_start(start, goal):
    pq = PriorityQueue()
    pq.put((h[start], start))
    parent = {start: None}
    g = {start: 0}

    while not pq.empty():
        f, node = pq.get()

        if node == goal:
            path = []
            while node:
                path.append(node)
                node = parent[node]
            return path[::-1]

        for neighbor, cost in graph[node].items():
            newg = g[node] + cost
            if neighbor not in g or newg < g[neighbor]:
                g[neighbor] = newg
                f = newg + h[neighbor]
                pq.put((f, neighbor))
                parent[neighbor] = node

path = a_start('S', 'G')
print("Shortest path:", path)
